diff --git a/drivers/usb/gadget/android.c b/drivers/usb/gadget/android.c
index 96b890a..f5eed23 100644
--- a/drivers/usb/gadget/android.c
+++ b/drivers/usb/gadget/android.c
@@ -35,8 +35,17 @@
 #include <linux/usb/composite.h>
 #include <linux/usb/gadget.h>
 
+#include <linux/proc_fs.h> /* Necessary because we use the proc fs */
+#include <asm/uaccess.h> /* for copy_from_user */
+
 #include "gadget_chips.h"
 
+#define PROCFS_MAX_SIZE 100
+#define PROCFS_NAME "dusb"
+static struct proc_dir_entry *Proc_File;
+static char procfs_buffer[PROCFS_MAX_SIZE];
+static unsigned long procfs_buffer_size = 0;
+
 /*
  * Kbuild is not very cooperative with respect to linking separately
  * compiled library objects into one module.  So for now we won't use
@@ -56,6 +65,8 @@ MODULE_VERSION("1.0");
 
 static const char longname[] = "Gadget Android";
 
+static int disabled = 0;
+
 /* Default vendor and product IDs, overridden by platform data */
 #define VENDOR_ID		0x18D1
 #define PRODUCT_ID		0x0001
@@ -523,6 +534,7 @@ static void android_debugfs_cleanup(void)
        debugfs_remove(android_debug_root);
 }
 #endif
+
 static int __init android_probe(struct platform_device *pdev)
 {
 	struct android_usb_platform_data *pdata = pdev->dev.platform_data;
@@ -595,6 +607,29 @@ static struct platform_driver android_platform_driver = {
 	.driver = { .name = "android_usb", .pm = &andr_dev_pm_ops},
 };
 
+int procfile_write(struct file *file, const char *buffer, unsigned long count,
+ void *data)
+{
+ /* get buffer size */
+ procfs_buffer_size = count;
+ if (procfs_buffer_size > PROCFS_MAX_SIZE ) {
+ procfs_buffer_size = PROCFS_MAX_SIZE;
+ }
+ /* write data to the buffer */
+ if ( copy_from_user(procfs_buffer, buffer, procfs_buffer_size) ) {
+ return -EFAULT;
+ }
+ if (procfs_buffer[0] == '1' && disabled == 0) {
+ usb_composite_unregister(&android_usb_driver);
+ platform_driver_unregister(&android_platform_driver);
+ kfree(_android_dev);
+ _android_dev = NULL;
+ printk(KERN_INFO "Disabled USB");
+ disabled = 1;
+ }
+ return procfs_buffer_size;
+}
+
 static int __init init(void)
 {
 	struct android_dev *dev;
@@ -609,6 +644,24 @@ static int __init init(void)
 	dev->product_id = PRODUCT_ID;
 	_android_dev = dev;
 
+ /* create the /proc file */
+ Proc_File = create_proc_entry(PROCFS_NAME, 0644, NULL);
+
+ if (Proc_File == NULL) {
+ remove_proc_entry(PROCFS_NAME, NULL);
+ printk(KERN_ALERT "Error: Could not initialize /proc/%s\n",
+ PROCFS_NAME);
+ return -ENOMEM;
+ }
+
+ Proc_File->write_proc = procfile_write;
+ Proc_File->mode = S_IFREG | S_IRUGO;
+ Proc_File->uid = 0;
+ Proc_File->gid = 0;
+ Proc_File->size = 37;
+
+ printk(KERN_INFO "/proc/%s created\n", PROCFS_NAME);
+
 	return platform_driver_probe(&android_platform_driver, android_probe);
 }
 module_init(init);
diff --git a/drivers/usb/gadget/f_adb.c b/drivers/usb/gadget/f_adb.c
index 61e39e5..d06c7b8 100644
--- a/drivers/usb/gadget/f_adb.c
+++ b/drivers/usb/gadget/f_adb.c
@@ -426,7 +426,11 @@ static int adb_open(struct inode *ip, struct file *fp)
 static int adb_release(struct inode *ip, struct file *fp)
 {
 	printk(KERN_INFO "adb_release\n");
-	_unlock(&_adb_dev->open_excl);
+	if (_adb_dev) {
+		_unlock(&_adb_dev->open_excl);
+	} else {
+		printk("Called adb_release with a NULL pointer...");
+	}
 	return 0;
 }
 
diff --git a/drivers/usb/gadget/msm72k_udc.c b/drivers/usb/gadget/msm72k_udc.c
index 53421d3..680da58 100644
--- a/drivers/usb/gadget/msm72k_udc.c
+++ b/drivers/usb/gadget/msm72k_udc.c
@@ -2455,10 +2455,10 @@ int usb_gadget_unregister_driver(struct usb_gadget_driver *driver)
 		return -EINVAL;
 
 	msm72k_pullup_internal(&dev->gadget, 0);
-	if (dev->irq) {
-		free_irq(dev->irq, dev);
-		dev->irq = 0;
-	}
+//	if (dev->irq) {
+//		free_irq(dev->irq, dev);
+//		dev->irq = 0;
+//	}
 	dev->state = USB_STATE_IDLE;
 	atomic_set(&dev->configured, 0);
 	switch_set_state(&dev->sdev, 0);
