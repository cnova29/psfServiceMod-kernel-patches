diff -U 3 -H -d -r -N -- kernel_msm-htc_/arch/arm/configs/msm7225_defconfig kernel_msm-htc/arch/arm/configs/msm7225_defconfig
--- kernel_msm-htc_/arch/arm/configs/msm7225_defconfig	2010-01-06 12:18:54.000000000 +0000
+++ kernel_msm-htc/arch/arm/configs/msm7225_defconfig	2010-12-17 18:12:48.757278869 +0000
@@ -851,7 +851,7 @@
 # CONFIG_DEVMEM is not set
 # CONFIG_DEVKMEM is not set
 # CONFIG_SERIAL_NONSTANDARD is not set
-
+CONFIG_TATTOO=y
 #
 # Serial drivers
 #
@@ -1031,35 +1031,55 @@
 # CONFIG_USB is not set
 # CONFIG_USB_OTG_WHITELIST is not set
 # CONFIG_USB_OTG_BLACKLIST_HUB is not set
-
-#
-# Enable Host or Gadget support to see Inventra options
-#
+# CONFIG_USB_GADGET_MUSB_HDRC is not set
 
 #
 # NOTE: USB_STORAGE depends on SCSI but BLK_DEV_SD may also be needed;
 #
-# CONFIG_USB_GADGET is not set
+CONFIG_USB_GADGET=y
+# CONFIG_USB_GADGET_DEBUG is not set
+# CONFIG_USB_GADGET_DEBUG_FILES is not set
+# CONFIG_USB_GADGET_DEBUG_FS is not set
+CONFIG_USB_GADGET_VBUS_DRAW=2
+CONFIG_USB_GADGET_SELECTED=y
+# CONFIG_USB_GADGET_AT91 is not set
+# CONFIG_USB_GADGET_ATMEL_USBA is not set
+# CONFIG_USB_GADGET_FSL_USB2 is not set
+# CONFIG_USB_GADGET_LH7A40X is not set
+# CONFIG_USB_GADGET_OMAP is not set
+# CONFIG_USB_GADGET_PXA25X is not set
+# CONFIG_USB_GADGET_PXA27X is not set
+# CONFIG_USB_GADGET_S3C2410 is not set
+# CONFIG_USB_GADGET_IMX is not set
+# CONFIG_USB_GADGET_M66592 is not set
+# CONFIG_USB_GADGET_AMD5536UDC is not set
+# CONFIG_USB_GADGET_FSL_QE is not set
+# CONFIG_USB_GADGET_CI13XXX is not set
+# CONFIG_USB_GADGET_NET2280 is not set
+# CONFIG_USB_GADGET_GOKU is not set
+CONFIG_USB_GADGET_MSM_72K=y
+CONFIG_USB_MSM_72K=y
+# CONFIG_USB_GADGET_DUMMY_HCD is not set
+CONFIG_USB_GADGET_DUALSPEED=y
+# CONFIG_USB_ZERO is not set
+# CONFIG_USB_ETH is not set
+# CONFIG_USB_GADGETFS is not set
+# CONFIG_USB_FILE_STORAGE is not set
+# CONFIG_USB_G_SERIAL is not set
+# CONFIG_USB_MIDI_GADGET is not set
+# CONFIG_USB_G_PRINTER is not set
+CONFIG_USB_ANDROID=y
+# CONFIG_USB_CDC_COMPOSITE is not set
 
 #
 # OTG and related infrastructure
 #
+# CONFIG_USB_GPIO_VBUS is not set
 
 #
 # USB Function Support
 #
-CONFIG_USB_FUNCTION=y
-CONFIG_USB_FUNCTION_MSM_HSUSB=y
-# CONFIG_USB_FUNCTION_NULL is not set
-# CONFIG_USB_FUNCTION_ZERO is not set
-# CONFIG_USB_FUNCTION_LOOPBACK is not set
-CONFIG_USB_FUNCTION_ADB=y
-# CONFIG_USB_FUNCTION_UMS is not set
-CONFIG_USB_FUNCTION_MASS_STORAGE=y
-CONFIG_USB_FUNCTION_DIAG=y
-CONFIG_USB_FUNCTION_SERIAL=y
-CONFIG_USB_FUNCTION_ETHER=y
-#CONFIG_USB_FUNCTION_PROJECTOR is not set
+# CONFIG_USB_FUNCTION is not set
 CONFIG_MMC=y
 # CONFIG_MMC_DEBUG is not set
 CONFIG_MMC_UNSAFE_RESUME=y
diff -U 3 -H -d -r -N -- kernel_msm-htc_/arch/arm/mach-msm/devices.c kernel_msm-htc/arch/arm/mach-msm/devices.c
--- kernel_msm-htc_/arch/arm/mach-msm/devices.c	2010-01-06 12:18:54.000000000 +0000
+++ kernel_msm-htc/arch/arm/mach-msm/devices.c	2010-12-17 18:11:56.993278872 +0000
@@ -307,6 +307,7 @@
 };
 
 /* about .functions variable, please refer: drivers/usb/function/usb_function.h  */
+
 static struct msm_hsusb_product usb_products[] = {
 	{
 		.product_id	= 0x0c01,
diff -U 3 -H -d -r -N -- kernel_msm-htc_/arch/arm/mach-msm/devices_htc.c kernel_msm-htc/arch/arm/mach-msm/devices_htc.c
--- kernel_msm-htc_/arch/arm/mach-msm/devices_htc.c	2010-01-06 12:18:54.000000000 +0000
+++ kernel_msm-htc/arch/arm/mach-msm/devices_htc.c	2010-12-17 18:11:56.993278872 +0000
@@ -261,6 +261,9 @@
 #ifdef CONFIG_USB_FUNCTION_MASS_STORAGE
 	platform_device_register(&msm_device_usb_mass_storage);
 #endif
+#ifdef CONFIG_USB_ANDROID
+	platform_device_register(&android_usb_device);
+#endif
 }
 
 static struct android_pmem_platform_data pmem_pdata = {
diff -U 3 -H -d -r -N -- kernel_msm-htc_/arch/arm/mach-msm/htc_battery.c kernel_msm-htc/arch/arm/mach-msm/htc_battery.c
--- kernel_msm-htc_/arch/arm/mach-msm/htc_battery.c	2010-01-06 12:18:54.000000000 +0000
+++ kernel_msm-htc/arch/arm/mach-msm/htc_battery.c	2010-12-17 18:11:56.997278953 +0000
@@ -1239,7 +1239,7 @@
 	wake_lock_init(&vbus_wake_lock, WAKE_LOCK_SUSPEND, "vbus_present");
 	mutex_init(&htc_batt_info.lock);
 	mutex_init(&htc_batt_info.rpc_lock);
-	usb_register_notifier(&usb_status_notifier);
+	//usb_register_notifier(&usb_status_notifier);
 	msm_rpc_create_server(&battery_server);
 	platform_driver_register(&htc_battery_driver);
 	batt_register_client(&batt_notify);
diff -U 3 -H -d -r -N -- kernel_msm-htc_/arch/arm/mach-msm/include/mach/msm_hsusb.h kernel_msm-htc/arch/arm/mach-msm/include/mach/msm_hsusb.h
--- kernel_msm-htc_/arch/arm/mach-msm/include/mach/msm_hsusb.h	2010-01-06 12:18:54.000000000 +0000
+++ kernel_msm-htc/arch/arm/mach-msm/include/mach/msm_hsusb.h	2010-12-17 18:11:56.997278953 +0000
@@ -21,7 +21,7 @@
 
 /* platform device data for msm_hsusb driver */
 
-#ifdef CONFIG_USB_FUNCTION
+//#ifdef CONFIG_USB_FUNCTION
 /* matches a product ID to a list of enabled functions */
 struct msm_hsusb_product {
 	/* product ID for usb_device_descriptor.idProduct */
@@ -32,7 +32,7 @@
 	*/
 	__u32 functions;
 };
-#endif
+//#endif
 
 struct msm_hsusb_platform_data {
 	/* hard reset the ULPI PHY */
diff -U 3 -H -d -r -N -- kernel_msm-htc_/drivers/char/Kconfig kernel_msm-htc/drivers/char/Kconfig
--- kernel_msm-htc_/drivers/char/Kconfig	2010-01-06 12:18:54.000000000 +0000
+++ kernel_msm-htc/drivers/char/Kconfig	2010-12-17 18:13:50.205278884 +0000
@@ -141,6 +141,12 @@
 
 	  To compile this driver as module, choose M here: the
 	  module will be called ip2.
+	  
+config TATTOO
+	tristate "Htc Tattoo hacks"
+	---help---
+	  Tatto hacks
+	  To compile this driver as module, choose M here.
 
 config ROCKETPORT
 	tristate "Comtrol RocketPort support"
diff -U 3 -H -d -r -N -- kernel_msm-htc_/drivers/char/Makefile kernel_msm-htc/drivers/char/Makefile
--- kernel_msm-htc_/drivers/char/Makefile	2010-01-06 12:18:54.000000000 +0000
+++ kernel_msm-htc/drivers/char/Makefile	2010-12-17 18:14:22.641278870 +0000
@@ -34,6 +34,7 @@
 obj-$(CONFIG_ATARI_DSP56K)	+= dsp56k.o
 obj-$(CONFIG_MOXA_SMARTIO)	+= mxser.o
 obj-$(CONFIG_COMPUTONE)		+= ip2/
+obj-$(CONFIG_TATTOO)		+= tattoo/
 obj-$(CONFIG_RISCOM8)		+= riscom8.o
 obj-$(CONFIG_ISI)		+= isicom.o
 obj-$(CONFIG_SYNCLINK)		+= synclink.o
diff -U 3 -H -d -r -N -- kernel_msm-htc_/drivers/char/tattoo/Makefile kernel_msm-htc/drivers/char/tattoo/Makefile
--- kernel_msm-htc_/drivers/char/tattoo/Makefile	1970-01-01 01:00:00.000000000 +0100
+++ kernel_msm-htc/drivers/char/tattoo/Makefile	2010-12-17 18:15:30.377278870 +0000
@@ -0,0 +1,4 @@
+#
+# Makefile for tattoo-hack
+#
+obj-$(CONFIG_TATTOO) += tattoo-hack.o
diff -U 3 -H -d -r -N -- kernel_msm-htc_/drivers/char/tattoo/tattoo-hack.c kernel_msm-htc/drivers/char/tattoo/tattoo-hack.c
--- kernel_msm-htc_/drivers/char/tattoo/tattoo-hack.c	1970-01-01 01:00:00.000000000 +0100
+++ kernel_msm-htc/drivers/char/tattoo/tattoo-hack.c	2010-12-17 18:16:24.121278882 +0000
@@ -0,0 +1,30 @@
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/delay.h>
+#include <linux/errno.h>
+#include <linux/io.h>
+
+int __init unprotect_nand(void)
+{
+	int* addr;
+	printk("Hack: unprotecting Tattoo system partition\n");
+	addr = ioremap(0xA0B00000, 0x1000);
+	if (addr) {	
+		printk("NAND protect value 0x%X\n", *addr);
+		*addr = 0;
+		iounmap(addr);
+	}
+	printk("Done - now be extremly careful!!!\n");
+	return 0;
+}
+
+void __exit unprotect_nand_exit(void)
+{
+	printk("unprotect nand modukle exit!\n");
+}
+
+module_init(unprotect_nand);
+module_exit(unprotect_nand_exit);
+MODULE_DESCRIPTION("Tattoo hack - enable write protect");
+MODULE_AUTHOR("bool_s");
+MODULE_LICENSE("GPL");
diff -U 3 -H -d -r -N -- kernel_msm-htc_/drivers/usb/gadget/android.c kernel_msm-htc/drivers/usb/gadget/android.c
--- kernel_msm-htc_/drivers/usb/gadget/android.c	2010-01-06 12:18:54.000000000 +0000
+++ kernel_msm-htc/drivers/usb/gadget/android.c	2010-12-17 18:11:56.997278953 +0000
@@ -32,6 +32,8 @@
 #include <linux/usb/ch9.h>
 #include <linux/usb/composite.h>
 #include <linux/usb/gadget.h>
+#include <linux/proc_fs.h>      /* Necessary because we use the proc fs */
+#include <asm/uaccess.h>        /* for copy_from_user */
 
 #include "f_mass_storage.h"
 #include "f_adb.h"
@@ -55,6 +57,13 @@
 MODULE_LICENSE("GPL");
 MODULE_VERSION("1.0");
 
+#define PROCFS_MAX_SIZE         100
+#define PROCFS_NAME             "dusb"
+static struct proc_dir_entry *Proc_File;
+static char procfs_buffer[PROCFS_MAX_SIZE];
+static unsigned long procfs_buffer_size = 0;
+static int disabled = 0;
+
 static const char longname[] = "Gadget Android";
 
 /* Default vendor and product IDs, overridden by platform data */
@@ -301,6 +310,30 @@
 	.probe = android_probe,
 };
 
+int procfile_write(struct file *file, const char *buffer, unsigned long count,
+                   void *data)
+{
+        procfs_buffer_size = count;
+        if (procfs_buffer_size > PROCFS_MAX_SIZE ) {
+                procfs_buffer_size = PROCFS_MAX_SIZE;
+        }
+
+        if ( copy_from_user(procfs_buffer, buffer, procfs_buffer_size) ) {
+                return -EFAULT;
+        }
+        if (procfs_buffer[0] == '1' && disabled == 0) {
+                composite_disconnect(_android_dev->cdev->gadget);
+                usb_composite_unregister(&android_usb_driver);
+		misc_deregister(&adb_enable_device);
+                platform_driver_unregister(&android_platform_driver);
+                printk(KERN_INFO "Disabled USB\n");
+                kfree(_android_dev);
+                _android_dev = NULL;
+                disabled = 1;
+        }
+        return procfs_buffer_size;
+}
+
 static int __init init(void)
 {
 	struct android_dev *dev;
@@ -317,6 +350,24 @@
 	dev->adb_product_id = ADB_PRODUCT_ID;
 	_android_dev = dev;
 
+        /* create the /proc file */
+        Proc_File = create_proc_entry(PROCFS_NAME, 0644, NULL);
+
+        if (Proc_File == NULL) {
+                remove_proc_entry(PROCFS_NAME, NULL);
+                printk(KERN_ALERT "Error: Could not initialize /proc/%s\n",
+                        PROCFS_NAME);
+                return -ENOMEM;
+        }
+
+        Proc_File->write_proc = procfile_write;
+        Proc_File->mode           = S_IFREG | S_IRUGO;
+        Proc_File->uid    = 0;
+        Proc_File->gid    = 0;
+        Proc_File->size           = 37;
+
+        printk(KERN_INFO "/proc/%s created\n", PROCFS_NAME);
+
 	ret = platform_driver_register(&android_platform_driver);
 	if (ret)
 		return ret;
diff -U 3 -H -d -r -N -- kernel_msm-htc_/drivers/usb/gadget/composite.c kernel_msm-htc/drivers/usb/gadget/composite.c
--- kernel_msm-htc_/drivers/usb/gadget/composite.c	2010-01-06 12:18:54.000000000 +0000
+++ kernel_msm-htc/drivers/usb/gadget/composite.c	2010-12-17 18:11:56.997278953 +0000
@@ -1049,7 +1049,7 @@
 	.speed		= USB_SPEED_HIGH,
 
 	.bind		= composite_bind,
-	.unbind		= __exit_p(composite_unbind),
+	.unbind		= composite_unbind,
 
 	.setup		= composite_setup,
 	.disconnect	= composite_disconnect,
@@ -1098,7 +1098,7 @@
  * This function is used to unregister drivers using the composite
  * driver framework.
  */
-void __exit usb_composite_unregister(struct usb_composite_driver *driver)
+void usb_composite_unregister(struct usb_composite_driver *driver)
 {
 	if (composite != driver)
 		return;
diff -U 3 -H -d -r -N -- kernel_msm-htc_/drivers/usb/gadget/f_adb.c kernel_msm-htc/drivers/usb/gadget/f_adb.c
--- kernel_msm-htc_/drivers/usb/gadget/f_adb.c	2009-11-11 07:00:22.000000000 +0000
+++ kernel_msm-htc/drivers/usb/gadget/f_adb.c	2010-12-17 18:11:56.997278953 +0000
@@ -470,7 +470,8 @@
 static int adb_release(struct inode *ip, struct file *fp)
 {
 	printk(KERN_INFO "adb_release\n");
-	_unlock(&_adb_dev->open_excl);
+	if (_adb_dev)
+		_unlock(&_adb_dev->open_excl);
 	return 0;
 }
 
