diff --git a/drivers/usb/gadget/android.c b/drivers/usb/gadget/android.c
index 3c4d44d..6ac8865 100644
--- a/drivers/usb/gadget/android.c
+++ b/drivers/usb/gadget/android.c
@@ -32,8 +32,18 @@
 #include <linux/usb/composite.h>
 #include <linux/usb/gadget.h>
 
+#include <linux/proc_fs.h>	/* Necessary because we use the proc fs */
+#include <asm/uaccess.h>	/* for copy_from_user */
+
 #include "gadget_chips.h"
 
+#define PROCFS_MAX_SIZE		100
+#define PROCFS_NAME 		"dusb"
+static struct proc_dir_entry *Proc_File;
+static char procfs_buffer[PROCFS_MAX_SIZE];
+static unsigned long procfs_buffer_size = 0;
+static int disabled = 0;
+
 /*
  * Kbuild is not very cooperative with respect to linking separately
  * compiled library objects into one module.  So for now we won't use
@@ -409,6 +419,30 @@ static struct platform_driver android_platform_driver = {
 	.probe = android_probe,
 };
 
+int procfile_write(struct file *file, const char *buffer, unsigned long count,
+		   void *data)
+{
+	/* get buffer size */
+	procfs_buffer_size = count;
+	if (procfs_buffer_size > PROCFS_MAX_SIZE ) {
+		procfs_buffer_size = PROCFS_MAX_SIZE;
+	}
+	
+	/* write data to the buffer */
+	if ( copy_from_user(procfs_buffer, buffer, procfs_buffer_size) ) {
+		return -EFAULT;
+	}
+	if (procfs_buffer[0] == '1' && disabled == 0) {
+		usb_composite_unregister(&android_usb_driver);
+		platform_driver_unregister(&android_platform_driver);
+		kfree(_android_dev);
+		_android_dev = NULL;
+		printk(KERN_INFO "Disabled USB");
+		disabled = 1;
+	}
+	return procfs_buffer_size;
+}
+
 static int __init init(void)
 {
 	struct android_dev *dev;
@@ -423,6 +457,24 @@ static int __init init(void)
 	dev->product_id = PRODUCT_ID;
 	_android_dev = dev;
 
+	/* create the /proc file */
+	Proc_File = create_proc_entry(PROCFS_NAME, 0644, NULL);
+	
+	if (Proc_File == NULL) {
+		remove_proc_entry(PROCFS_NAME, NULL);
+		printk(KERN_ALERT "Error: Could not initialize /proc/%s\n",
+			PROCFS_NAME);
+		return -ENOMEM;
+	}
+
+	Proc_File->write_proc = procfile_write;
+	Proc_File->mode 	  = S_IFREG | S_IRUGO;
+	Proc_File->uid 	  = 0;
+	Proc_File->gid 	  = 0;
+	Proc_File->size 	  = 37;
+
+	printk(KERN_INFO "/proc/%s created\n", PROCFS_NAME);
+
 	return platform_driver_register(&android_platform_driver);
 }
 module_init(init);
diff --git a/drivers/usb/gadget/composite.c b/drivers/usb/gadget/composite.c
index 08bcecb..ca0edc0 100644
--- a/drivers/usb/gadget/composite.c
+++ b/drivers/usb/gadget/composite.c
@@ -1139,7 +1139,8 @@ static struct usb_gadget_driver composite_driver = {
 	.speed		= USB_SPEED_HIGH,
 
 	.bind		= composite_bind,
-	.unbind		= __exit_p(composite_unbind),
+//	.unbind		= __exit_p(composite_unbind),
+	.unbind		= composite_unbind,
 
 	.setup		= composite_setup,
 	.disconnect	= composite_disconnect,
@@ -1192,7 +1193,8 @@ int __init usb_composite_register(struct usb_composite_driver *driver)
  * This function is used to unregister drivers using the composite
  * driver framework.
  */
-void __exit usb_composite_unregister(struct usb_composite_driver *driver)
+//void __exit usb_composite_unregister(struct usb_composite_driver *driver)
+void usb_composite_unregister(struct usb_composite_driver *driver)
 {
 	if (composite != driver)
 		return;
diff --git a/drivers/usb/gadget/f_adb.c b/drivers/usb/gadget/f_adb.c
index 301300e..30630bc 100644
--- a/drivers/usb/gadget/f_adb.c
+++ b/drivers/usb/gadget/f_adb.c
@@ -424,7 +424,12 @@ static int adb_open(struct inode *ip, struct file *fp)
 static int adb_release(struct inode *ip, struct file *fp)
 {
 	printk(KERN_INFO "adb_release\n");
-	_unlock(&_adb_dev->open_excl);
+	//_unlock(&_adb_dev->open_excl);
+	if (_adb_dev) {
+		_unlock(&_adb_dev->open_excl);
+	} else {
+		printk("Called adb_release with a NULL pointer...");
+	}
 	return 0;
 }
 
