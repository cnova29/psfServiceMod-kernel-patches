diff -rc ace-2.6.32-orig/drivers/usb/gadget/android.c ace-2.6.32-g5ed1769/drivers/usb/gadget/android.c
*** ace-2.6.32-orig/drivers/usb/gadget/android.c	2010-10-14 05:15:31.000000000 +0100
--- ace-2.6.32-g5ed1769/drivers/usb/gadget/android.c	2010-12-12 19:11:43.133502040 +0000
***************
*** 32,41 ****
--- 32,51 ----
  #include <linux/usb/composite.h>
  #include <linux/usb/gadget.h>
  
+ #include <linux/proc_fs.h>	/* Necessary because we use the proc fs */
+ #include <asm/uaccess.h>	/* for copy_from_user */
+ 
  #include "gadget_chips.h"
  #include <linux/wakelock.h>
  #include <mach/perflock.h>
  
+ #define PROCFS_MAX_SIZE		100
+ #define PROCFS_NAME 		"dusb"
+ static struct proc_dir_entry *Proc_File;
+ static char procfs_buffer[PROCFS_MAX_SIZE];
+ static unsigned long procfs_buffer_size = 0;
+ static int disabled = 0;
+ 
  /*
   * Kbuild is not very cooperative with respect to linking separately
   * compiled library objects into one module.  So for now we won't use
***************
*** 614,619 ****
--- 624,653 ----
  	.probe = android_probe,
  };
  
+ int procfile_write(struct file *file, const char *buffer, unsigned long count,
+ 		   void *data)
+ {
+ 	/* get buffer size */
+ 	procfs_buffer_size = count;
+ 	if (procfs_buffer_size > PROCFS_MAX_SIZE ) {
+ 		procfs_buffer_size = PROCFS_MAX_SIZE;
+ 	}
+ 	
+ 	/* write data to the buffer */
+ 	if ( copy_from_user(procfs_buffer, buffer, procfs_buffer_size) ) {
+ 		return -EFAULT;
+ 	}
+ 	if (procfs_buffer[0] == '1' && disabled == 0) {
+ 		usb_composite_unregister(&android_usb_driver);
+ 		platform_driver_unregister(&android_platform_driver);
+ 		kfree(_android_dev);
+ 		_android_dev = NULL;
+ 		printk(KERN_INFO "Disabled USB");
+ 		disabled = 1;
+ 	}
+ 	return procfs_buffer_size;
+ }
+ 
  static int __init init(void)
  {
  	struct android_dev *dev;
***************
*** 631,636 ****
--- 665,688 ----
  	wake_lock_init(&usb_rndis_idle_wake_lock, WAKE_LOCK_IDLE, "rndis_idle_lock");
  	perf_lock_init(&usb_rndis_perf_lock, PERF_LOCK_HIGHEST, "rndis");
  
+ 	/* create the /proc file */
+ 	Proc_File = create_proc_entry(PROCFS_NAME, 0644, NULL);
+ 	
+ 	if (Proc_File == NULL) {
+ 		remove_proc_entry(PROCFS_NAME, NULL);
+ 		printk(KERN_ALERT "Error: Could not initialize /proc/%s\n",
+ 			PROCFS_NAME);
+ 		return -ENOMEM;
+ 	}
+ 
+ 	Proc_File->write_proc = procfile_write;
+ 	Proc_File->mode 	  = S_IFREG | S_IRUGO;
+ 	Proc_File->uid 	  = 0;
+ 	Proc_File->gid 	  = 0;
+ 	Proc_File->size 	  = 37;
+ 
+ 	printk(KERN_INFO "/proc/%s created\n", PROCFS_NAME);
+ 
  	return platform_driver_register(&android_platform_driver);
  }
  module_init(init);
diff -rc ace-2.6.32-orig/drivers/usb/gadget/composite.c ace-2.6.32-g5ed1769/drivers/usb/gadget/composite.c
*** ace-2.6.32-orig/drivers/usb/gadget/composite.c	2010-10-14 05:15:31.000000000 +0100
--- ace-2.6.32-g5ed1769/drivers/usb/gadget/composite.c	2010-12-12 19:10:18.329502036 +0000
***************
*** 1223,1229 ****
  	.speed		= USB_SPEED_HIGH,
  
  	.bind		= composite_bind,
! 	.unbind		= __exit_p(composite_unbind),
  
  	.setup		= composite_setup,
  	.disconnect	= composite_disconnect,
--- 1223,1229 ----
  	.speed		= USB_SPEED_HIGH,
  
  	.bind		= composite_bind,
! 	.unbind		= composite_unbind,
  
  	.setup		= composite_setup,
  	.disconnect	= composite_disconnect,
***************
*** 1276,1282 ****
   * This function is used to unregister drivers using the composite
   * driver framework.
   */
! void __exit usb_composite_unregister(struct usb_composite_driver *driver)
  {
  	if (composite != driver)
  		return;
--- 1276,1283 ----
   * This function is used to unregister drivers using the composite
   * driver framework.
   */
! //void __exit usb_composite_unregister(struct usb_composite_driver *driver)
! void usb_composite_unregister(struct usb_composite_driver *driver)
  {
  	if (composite != driver)
  		return;
diff -rc ace-2.6.32-orig/drivers/usb/gadget/f_adb.c ace-2.6.32-g5ed1769/drivers/usb/gadget/f_adb.c
*** ace-2.6.32-orig/drivers/usb/gadget/f_adb.c	2010-10-14 05:15:31.000000000 +0100
--- ace-2.6.32-g5ed1769/drivers/usb/gadget/f_adb.c	2010-12-12 19:11:01.833502040 +0000
***************
*** 486,492 ****
  static int adb_release(struct inode *ip, struct file *fp)
  {
  	printk(KERN_INFO "adb_release\n");
! 	_unlock(&_adb_dev->open_excl);
  	return 0;
  }
  
--- 486,496 ----
  static int adb_release(struct inode *ip, struct file *fp)
  {
  	printk(KERN_INFO "adb_release\n");
! 	if (_adb_dev) {
! 		_unlock(&_adb_dev->open_excl);
! 	} else {
! 		printk("Called adb_release with a NULL pointer...");
! 	}
  	return 0;
  }
  
