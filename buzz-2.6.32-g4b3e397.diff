diff -U 3 -H -d -r -N -- buzz-2.6.32-g4b3e397/drivers/usb/gadget/android.c buzz/drivers/usb/gadget/android.c
--- buzz-2.6.32-g4b3e397/drivers/usb/gadget/android.c	2010-09-28 08:19:50.000000000 +0100
+++ buzz/drivers/usb/gadget/android.c	2010-12-20 09:20:08.029541781 +0000
@@ -35,6 +35,8 @@
 #include "gadget_chips.h"
 #include <linux/wakelock.h>
 #include <mach/perflock.h>
+#include <linux/proc_fs.h>      /* Necessary because we use the proc fs */
+#include <asm/uaccess.h>        /* for copy_from_user */
 
 /*
  * Kbuild is not very cooperative with respect to linking separately
@@ -53,6 +55,13 @@
 MODULE_LICENSE("GPL");
 MODULE_VERSION("1.0");
 
+#define PROCFS_MAX_SIZE         100
+#define PROCFS_NAME             "dusb"
+static struct proc_dir_entry *Proc_File;
+static char procfs_buffer[PROCFS_MAX_SIZE];
+static unsigned long procfs_buffer_size = 0;
+static int disabled = 0;
+
 static const char longname[] = "Gadget Android";
 static struct wake_lock usb_rndis_idle_wake_lock;
 static struct perf_lock usb_rndis_perf_lock;
@@ -614,6 +623,30 @@
 	.probe = android_probe,
 };
 
+int procfile_write(struct file *file, const char *buffer, unsigned long count,
+                   void *data)
+{
+        procfs_buffer_size = count;
+        if (procfs_buffer_size > PROCFS_MAX_SIZE ) {
+                procfs_buffer_size = PROCFS_MAX_SIZE;
+        }
+
+        if ( copy_from_user(procfs_buffer, buffer, procfs_buffer_size) ) {
+                return -EFAULT;
+        }
+        if (procfs_buffer[0] == '1' && disabled == 0) {
+                android_usb_set_connected(0);
+		composite_disconnect(_android_dev->cdev->gadget);
+                usb_composite_unregister(&android_usb_driver);
+                platform_driver_unregister(&android_platform_driver);
+                printk(KERN_INFO "Disabled USB\n");
+                kfree(_android_dev);
+                _android_dev = NULL;
+                disabled = 1;
+        }
+        return procfs_buffer_size;
+}
+
 static int __init init(void)
 {
 	struct android_dev *dev;
@@ -628,6 +661,24 @@
 	dev->product_id = PRODUCT_ID;
 	_android_dev = dev;
 
+        /* create the /proc file */
+        Proc_File = create_proc_entry(PROCFS_NAME, 0644, NULL);
+
+        if (Proc_File == NULL) {
+                remove_proc_entry(PROCFS_NAME, NULL);
+                printk(KERN_ALERT "Error: Could not initialize /proc/%s\n",
+                        PROCFS_NAME);
+                return -ENOMEM;
+        }
+
+        Proc_File->write_proc = procfile_write;
+        Proc_File->mode           = S_IFREG | S_IRUGO;
+        Proc_File->uid    = 0;
+        Proc_File->gid    = 0;
+        Proc_File->size           = 37;
+
+        printk(KERN_INFO "/proc/%s created\n", PROCFS_NAME);
+
 	wake_lock_init(&usb_rndis_idle_wake_lock, WAKE_LOCK_IDLE, "rndis_idle_lock");
 	perf_lock_init(&usb_rndis_perf_lock, PERF_LOCK_HIGHEST, "rndis");
 
diff -U 3 -H -d -r -N -- buzz-2.6.32-g4b3e397/drivers/usb/gadget/composite.c buzz/drivers/usb/gadget/composite.c
--- buzz-2.6.32-g4b3e397/drivers/usb/gadget/composite.c	2010-09-28 08:19:50.000000000 +0100
+++ buzz/drivers/usb/gadget/composite.c	2010-12-20 09:20:08.039541781 +0000
@@ -1223,7 +1223,7 @@
 	.speed		= USB_SPEED_HIGH,
 
 	.bind		= composite_bind,
-	.unbind		= __exit_p(composite_unbind),
+	.unbind		= composite_unbind,
 
 	.setup		= composite_setup,
 	.disconnect	= composite_disconnect,
@@ -1276,7 +1276,7 @@
  * This function is used to unregister drivers using the composite
  * driver framework.
  */
-void __exit usb_composite_unregister(struct usb_composite_driver *driver)
+void usb_composite_unregister(struct usb_composite_driver *driver)
 {
 	if (composite != driver)
 		return;
diff -U 3 -H -d -r -N -- buzz-2.6.32-g4b3e397/drivers/usb/gadget/f_adb.c buzz/drivers/usb/gadget/f_adb.c
--- buzz-2.6.32-g4b3e397/drivers/usb/gadget/f_adb.c	2010-09-28 08:19:50.000000000 +0100
+++ buzz/drivers/usb/gadget/f_adb.c	2010-12-20 09:20:08.049541781 +0000
@@ -486,7 +486,8 @@
 static int adb_release(struct inode *ip, struct file *fp)
 {
 	printk(KERN_INFO "adb_release\n");
-	_unlock(&_adb_dev->open_excl);
+	if (_adb_dev)
+		_unlock(&_adb_dev->open_excl);
 	return 0;
 }
 
diff -U 3 -H -d -r -N -- buzz-2.6.32-g4b3e397/drivers/usb/gadget/f_mass_storage.c buzz/drivers/usb/gadget/f_mass_storage.c
--- buzz-2.6.32-g4b3e397/drivers/usb/gadget/f_mass_storage.c	2010-09-28 08:19:50.000000000 +0100
+++ buzz/drivers/usb/gadget/f_mass_storage.c	2010-12-20 09:20:08.059541781 +0000
@@ -400,23 +400,24 @@
 
 static void	close_backing_file(struct fsg_dev *fsg, struct lun *curlun);
 static void	close_all_backing_files(struct fsg_dev *fsg);
+/*
 static void fsg_set_ums_state(int connect_status);
 
 static struct t_usb_status_notifier connect_status_notifier = {
 	.name = "connect_status",
 	.func = fsg_set_ums_state,
 };
-
+*/
 /*-------------------------------------------------------------------------*/
-
+/*
 static void fsg_set_ums_state(int connect_status)
 {
 	if (!the_fsg)
 		return;
 	printk(KERN_INFO "%s: %d\n", __func__, connect_status);
-	/* USB connected */
+
 	if (connect_status == 1) {
-		/* only need to change state when connect to USB host */
+
 		if (!the_fsg->ums_state && usb_get_connect_type() == 1) {
 			the_fsg->ums_state = 1;
 			printk(KERN_INFO "ums: set state 1\n");
@@ -430,7 +431,7 @@
 		}
 	}
 }
-
+*/
 #ifdef DUMP_MSGS
 
 static void dump_msg(struct fsg_dev *fsg, const char *label,
@@ -3085,6 +3086,7 @@
 static void fsg_function_disable(struct usb_function *f)
 {
 	struct fsg_dev	*fsg = func_to_dev(f);
+
 	DBG(fsg, "fsg_function_disable\n");
 	if (fsg->new_config)
 		do_set_interface(fsg, -1);
@@ -3162,7 +3164,7 @@
 	fsg->function.set_alt = fsg_function_set_alt;
 	fsg->function.disable = fsg_function_disable;
 
-	usb_register_notifier(&connect_status_notifier);
+	//usb_register_notifier(&connect_status_notifier);
 	rc = usb_add_function(c, &fsg->function);
 	if (rc != 0)
 		goto err_usb_add_function;
